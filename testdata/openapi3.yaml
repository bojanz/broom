openapi: 3.0.3
info:
  version: 1.0.0
  title: Product API
  description: An imaginary API used for testing Broom.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.test-product-api.io
tags:
  - name: Products
paths:
  /products:
    get:
      summary: List products
      description: Retrieves a list of <b>products</b> matching the specified criteria.
      operationId: list-products
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/Vendor'
        - in: query
          name: filter[owner_id]
          description: Allows filtering by owner_id.
          deprecated: true
          schema:
            type: string
        - in: query
          name: page[before]
          description: Shows 50 products before the given ID.
          schema:
            type: string
            format: ulid
        - in: query
          name: page[after]
          description: Shows 50 products after the given ID.
          schema:
            type: string
            format: ulid
        - in: query
          name: sort
          description: |
            Allows <b>sorting</b> by a single field.<br>
            Use a dash ("-") to sort descending.
          schema:
            type: string
            default: created_at
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  _links:
                    $ref: '#/components/schemas/ListLinks'
        default:
          description: Error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create product
      description: Creates a new product.
      operationId: create-product
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/Vendor'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - currency_code
              properties:
                owner_id:
                  type: string
                  format: uuid
                  description: ID of the owner. Defaults to the requester.
                name:
                  type: string
                  description: The product name.
                sku:
                  type: string
                  description: The product sku.
                description:
                  type: string
                  description: The product description.
                price:
                  type: integer
                  description: The product price, in cents.
                  example: 1099
                currency_code:
                  type: string
                  description: The currency code.
                  enum: [EUR, USD]
                  default: USD
                meta:
                  type: object
                  properties:
                    category:
                      type: object
                      properties:
                        catalog:
                          type: string
                          description: The catalog category.
                          deprecated: true
                    published:
                      type: boolean
                      description: Whether the product is visible to customers.
                      default: true
                    in_stock:
                      type: boolean
                      description: Whether the product is in stock.
                      default: true
      responses:
        '201':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: Error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
  '/products/{product_id}':
    parameters:
      - $ref: '#/components/parameters/ProductID'
      - $ref: '#/components/parameters/Vendor'
    get:
      summary: Get product
      description: Retrieves the specified product.
      operationId: get-product
      tags:
        - Products
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: Error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update product
      description: Updates the specified product.
      operationId: update-product
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The product name.
                sku:
                  type: string
                  description: The product sku.
                description:
                  type: string
                  description: The product description.
                price:
                  type: integer
                  description: The product price, in cents.
                currency_code:
                  type: string
                  description: The currency code.
                  enum: [EUR, USD]
                meta:
                  type: object
                  properties:
                    published:
                      type: boolean
                      description: Whether the product is visible to customers.
                    in_stock:
                      type: boolean
                      description: Whether the product is in stock.
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: Error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete product
      description: Deletes the specified product.
      operationId: delete-product
      tags:
        - Products
      responses:
        '204':
          description: Product deleted.
        default:
          description: Error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: ulid
          description: The ID of the product.
        owner_id:
          type: string
          format: uuid
          description: The ID of the owner.
        name:
          type: string
          description: The product name.
        sku:
          type: string
          description: The product sku.
        description:
          type: string
          description: The product description.
        price:
          type: integer
          description: The product price, in cents.
        currency_code:
          type: string
          description: The currency code.
          enum: [EUR, USD]
        status:
          type: boolean
          description: Whether the product is available for purchase.
        created_at:
          type: string
          format: date-time
          description: The date and time when the product was created.
        updated_at:
          type: string
          format: date-time
          description: The date and time when the product was last updated.
        _links:
          type: object
          properties:
            self:
              type: object
              description: Link to the current product.
              properties:
                href:
                  type: string
                  description: URL of the link.
    ListLinks:
      type: object
      properties:
        self:
          type: object
          description: Link to the current set of items.
          properties:
            href:
              type: string
              description: URL of the link.
        previous:
          type: object
          description: Link to the previous set of items.
          properties:
            href:
              type: string
              description: URL of the link.
        next:
          type: object
          description: Link to the next set of items.
          properties:
            href:
              type: string
              description: URL of the link
    Error:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type.
        title:
          type: string
          description: 'A short, human-readable summary of the problem type.'
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 404
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem.
  parameters:
    ProductID:
      in: path
      name: product_id
      description: The ID of the product.
      required: true
      schema:
        type: string
        format: ulid
    Vendor:
      in: header
      name: X-Vendor
      description: The vendor.
      schema:
        type: string
